import { PiniaPluginContext } from 'pinia';

declare type StorageLike = Pick<Storage, 'getItem' | 'setItem'>;
interface PersistedStateOptions {
    /**
     * Storage key to use.
     * @default $store.id
     */
    key?: string;
    /**
     * Where to store persisted state.
     * @default localStorage
     */
    storage?: StorageLike;
    /**
     * Dot-notation paths to partially save state.
     * @default undefined
     */
    paths?: Array<string>;
    /**
     * Overwrite initial state (patch otherwise).
     * @default false
     */
    overwrite?: boolean;
    /**
     * Hook called before state is hydrated from storage.
     * @default undefined
     */
    beforeRestore?: (context: PiniaPluginContext) => void;
    /**
     * Hook called after state is hydrated from storage.
     * @default undefined
     */
    afterRestore?: (context: PiniaPluginContext) => void;
}
declare module 'pinia' {
    interface DefineStoreOptionsBase<S extends StateTree, Store> {
        /**
         * Persist store in storage.
         * @docs https://github.com/prazdevs/pinia-plugin-persistedstate.
         */
        persist?: boolean | PersistedStateOptions;
    }
}
/**
 * Pinia plugin to persist stores in a storage based on vuex-persistedstate.
 */
declare function export_default(context: PiniaPluginContext): void;

export { PersistedStateOptions, StorageLike, export_default as default };
