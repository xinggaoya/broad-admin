// src/pick.ts
function get(object, path) {
  return path.reduce((obj, p) => {
    return obj == null ? void 0 : obj[p];
  }, object);
}
function set(object, path, val) {
  return path.slice(0, -1).reduce((obj, p) => {
    return !/^(__proto__)$/.test(p) ? obj[p] = obj[p] || {} : {};
  }, object)[path[path.length - 1]] = val, object;
}
function pick(object, paths) {
  return paths.reduce((substate, path) => {
    const pathArray = path.split(".");
    return set(substate, pathArray, get(object, pathArray));
  }, {});
}

// src/index.ts
function src_default(context) {
  const { options: { persist }, store } = context;
  if (!persist)
    return;
  const {
    storage = localStorage,
    key = store.$id,
    paths = null,
    overwrite = false,
    beforeRestore = null,
    afterRestore = null
  } = typeof persist != "boolean" ? persist : {};
  beforeRestore == null ? void 0 : beforeRestore(context);
  try {
    const fromStorage = storage.getItem(key);
    if (fromStorage) {
      if (overwrite)
        store.$state = JSON.parse(fromStorage);
      else
        store.$patch(JSON.parse(fromStorage));
    }
  } catch (_error) {
  }
  afterRestore == null ? void 0 : afterRestore(context);
  store.$subscribe((_mutation, state) => {
    try {
      const toStore = Array.isArray(paths) ? pick(state, paths) : state;
      storage.setItem(key, JSON.stringify(toStore));
    } catch (_error) {
    }
  }, { detached: true });
}
export {
  src_default as default
};
