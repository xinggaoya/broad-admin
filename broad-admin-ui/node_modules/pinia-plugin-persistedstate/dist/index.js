var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});

// src/pick.ts
function get(object, path) {
  return path.reduce((obj, p) => {
    return obj == null ? void 0 : obj[p];
  }, object);
}
function set(object, path, val) {
  return path.slice(0, -1).reduce((obj, p) => {
    return !/^(__proto__)$/.test(p) ? obj[p] = obj[p] || {} : {};
  }, object)[path[path.length - 1]] = val, object;
}
function pick(object, paths) {
  return paths.reduce((substate, path) => {
    const pathArray = path.split(".");
    return set(substate, pathArray, get(object, pathArray));
  }, {});
}

// src/index.ts
function src_default(context) {
  const { options: { persist }, store } = context;
  if (!persist)
    return;
  const {
    storage = localStorage,
    key = store.$id,
    paths = null,
    overwrite = false,
    beforeRestore = null,
    afterRestore = null
  } = typeof persist != "boolean" ? persist : {};
  beforeRestore == null ? void 0 : beforeRestore(context);
  try {
    const fromStorage = storage.getItem(key);
    if (fromStorage) {
      if (overwrite)
        store.$state = JSON.parse(fromStorage);
      else
        store.$patch(JSON.parse(fromStorage));
    }
  } catch (_error) {
  }
  afterRestore == null ? void 0 : afterRestore(context);
  store.$subscribe((_mutation, state) => {
    try {
      const toStore = Array.isArray(paths) ? pick(state, paths) : state;
      storage.setItem(key, JSON.stringify(toStore));
    } catch (_error) {
    }
  }, { detached: true });
}
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
